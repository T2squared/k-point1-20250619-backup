「DECODER routines::unsupported」エラーは、Node.jsが内部で使用しているOpenSSL 3.x系で、特定の暗号アルゴリズムや鍵の形式がデフォルトではサポートされなくなった、または「レガシープロバイダー」に移動されたために発生することが多いです。
OpenSSL 3.0以降、多くの古い、またはセキュリティ上の懸念があるアルゴリズムはデフォルトのプロバイダーから外され、「レガシープロバイダー」という別のモジュールにまとめられました。Google認証ライブラリが依存している暗号処理がこのレガシーなものに該当する場合、このエラーが発生します。
解決策として、以下のいずれかを試してみてください。
1. レガシープロバイダーを有効にする
最も一般的な解決策は、Node.jsの起動時にOpenSSLのレガシープロバイダーを有効にすることです。
方法a: Node.jsの起動オプションで指定する
Node.jsアプリケーションを起動する際に --openssl-legacy-provider フラグを追加します。
node --openssl-legacy-provider your-app.js
Use code with caution.
Bash
もし npm start や yarn start などスクリプト経由で起動している場合は、package.json の scripts セクションを修正します。
例 (package.json):
{
  "scripts": {
    "start": "node --openssl-legacy-provider your-app.js"
  }
}
Use code with caution.
Json
方法b: 環境変数で指定する
環境変数 NODE_OPTIONS を設定することでも同様の効果が得られます。
export NODE_OPTIONS=--openssl-legacy-provider
node your-app.js
Use code with caution.
Bash
または、.env ファイルを使用している場合は、そこに記述します。
NODE_OPTIONS=--openssl-legacy-provider
Use code with caution.
注意点:
レガシープロバイダーを有効にすると、セキュリティ的に古い、または推奨されない可能性のある暗号アルゴリズムが利用可能になります。根本的な解決策としては、Google認証ライブラリが使用している鍵の形式や暗号アルゴリズムがOpenSSL 3.xのデフォルトプロバイダーでサポートされているものに更新されること、またはアプリケーション側で新しい形式の鍵を使用することなどが考えられますが、ライブラリ側の対応に依存する部分も大きいです。
2. Google認証ライブラリのバージョンを確認・更新する
使用しているGoogle認証ライブラリ（例: google-auth-library, firebase-admin など）が最新バージョンであるか確認し、古ければアップデートしてみてください。新しいバージョンではOpenSSL 3.xへの対応が進んでいる可能性があります。
npm update google-auth-library
# または yarn upgrade google-auth-library
Use code with caution.
Bash
（ライブラリ名はお使いのものに置き換えてください）
3. 鍵の形式を確認・変換する (該当する場合)
もし、サービスアカウントの秘密鍵など、特定の鍵ファイルを使用している場合、その鍵の形式が古い可能性があります。
OpenSSL 3.xは、特に秘密鍵においてPKCS#8形式を推奨しています。もし鍵が古いPKCS#1形式である場合、PKCS#8形式に変換することで問題が解決することがあります。
鍵の形式を確認し、必要であればOpenSSLコマンドラインツールで変換できます。
例: RSA秘密鍵をPKCS#1からPKCS#8に変換するコマンド
openssl pkcs8 -topk8 -inform PEM -outform PEM -in old_private_key.pem -out new_private_key_pkcs8.pem -nocrypt
Use code with caution.
Bash
変換後、新しい鍵ファイル (new_private_key_pkcs8.pem) をアプリケーションで使用するように設定します。
4. Node.jsのバージョンをダウングレードする (最終手段)
上記の方法で解決しない場合、一時的な回避策として、OpenSSL 3.x系を内部で使用していない古いバージョンのNode.js (例: Node.js 16.x はOpenSSL 1.1.1系を使用) にダウングレードすることも考えられます。ただし、これはセキュリティパッチや新機能の恩恵を受けられなくなるため、推奨される解決策ではありません。
トラブルシューティングのポイント
エラーが発生する具体的な処理: Google認証ライブラリのどのAPIを呼び出した際にエラーが発生するのか特定できると、原因究明に役立ちます（例: IDトークンの検証時、JWTの署名時など）。
詳細なエラーログ: エラーメッセージのスタックトレース全体を確認すると、どのモジュールや関数が問題を引き起こしているかのヒントが得られることがあります。
まずは 1. レガシープロバイダーを有効にする を試すのが最も手軽で効果的な場合が多いです。
それでも解決しない場合は、他の方法を検討してみてください。